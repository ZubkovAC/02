{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","api/authAPI.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","authAPI","initialState","isLoggedIn","setIsLogged","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","auth","action","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","loginTC","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","FormControlLabel","control","handleChange","name","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e210b563.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b3721dee-f7d9-448c-a293-e8087db0634c'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return  instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b3721dee-f7d9-448c-a293-e8087db0634c'\r\n    }\r\n})\r\n\r\n\r\n\r\nexport const authAPI = {\r\n    login(data:LoginParamsType ) {\r\n        return instance.post<AuthApiType<{userId: number}>>(`auth/login`,data)\r\n    },\r\n    me(){\r\n        return instance.get<AuthApiType>(`auth/me`)\r\n    },\r\n    logout(){\r\n        return instance.delete<AuthApiType<AuthApiMeType>>(`auth/login`)\r\n    }\r\n}\r\n\r\n// Types\r\nexport type LoginParamsType={\r\n    email:string\r\n    password:string\r\n    rememberMe?:boolean\r\n    captcha?:string\r\n}\r\nexport type AuthApiType <D={}>= {\r\n    data: D\r\n    fieldsErrors: []\r\n    messages: []\r\n    resultCode: number\r\n}\r\nexport type AuthApiMeType = {\r\n    email: string\r\n    id: number\r\n    login: string\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {authAPI, LoginParamsType} from \"../../api/authAPI\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialAuthStateType = initialState, action: ActionsAuthType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const setIsLogged = (value: boolean) => ({type: \"login/SET-IS-LOGGED-IN\", value} as const)\r\n// TC\r\nexport const loginTC = (data:LoginParamsType) => (dispatch: Dispatch<ActionsAuthType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    return authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLogged(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsAuthType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLogged(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// Types\r\ntype InitialAuthStateType = typeof initialState\r\n\r\nexport type SetIsLogged = ReturnType<typeof setIsLogged>\r\n\r\nexport type ActionsAuthType =\r\n    | SetIsLogged\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType","import {SetIsLogged, setIsLogged} from \"../features/Login/auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {authAPI} from \"../api/authAPI\";\r\n\r\nconst initialState: InitialAppStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialState, action: ActionsAppType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/AUTH-STATUS':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n//AC\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/AUTH-STATUS', isInitialized} as const)\r\n\r\n\r\n//TC\r\nexport const initializeAppTC = () => (dispatch: ThunkDispatch<InitialAppStateType, unknown, ActionsAppType | SetIsLogged>) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLogged(true));\r\n            }\r\n        })\r\n        .finally(()=>dispatch(setIsInitializedAC(true)))\r\n}\r\n\r\n// Types\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetIsInitializedAC = ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ActionsAppType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetIsInitializedAC\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialAppStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// TC\r\nexport const fetchTodolistsTC = () => (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) =>  (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) =>  (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// TC\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n\r\n// types\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport { IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if(!isLoggedIn){\r\n        return <Redirect to={'/login'} />\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport { useFormik } from 'formik'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nexport const Login = () => {\r\n\r\n\r\n    const dispatch= useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Must be 15 characters or less';\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Must be 6 characters or less';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: data => {\r\n            dispatch(loginTC(data))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn){\r\n        return <Redirect  to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.values.email\r\n                            && formik.errors.email\r\n                            && <div style={{color:'red'}}>{formik.errors.email}</div>\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.values.password\r\n                            && formik.errors.password\r\n                            && <div style={{color:'red'}}>{formik.errors.password}</div>\r\n                        }\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={formik.handleChange}\r\n                                    checked={formik.values.rememberMe}\r\n                                    name='rememberMe'\r\n                                />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Redirect, Route,Switch} from 'react-router-dom'\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( ()=>{\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n\r\n    const logout = () =>{\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logout}>Log Out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n\r\n                    <Route path={'/404'} render={() => <h1> 404:PAGE BOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth:authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}